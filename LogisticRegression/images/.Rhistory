pushViewport(vp2)
print(Tplot.ylorrd, newpage = FALSE)
upViewport(1)
vp3 <- viewport(x = 0.25, y = 0,
height = 1, width = 0.5,
just = c("left", "bottom"),
name = "centre")
pushViewport(vp3)
print(Tplot.spec, newpage = FALSE)
upViewport(1)
vp4 <- viewport(x = 1, y = 1,
height = 0.5, width = 0.25,
just = c("right", "top"),
name = "upper right")
pushViewport(vp4)
print(Tplot.hcl, newpage = FALSE)
upViewport(1)
vp5 <- viewport(x = 1, y = 0,
height = 0.5, width = 0.25,
just = c("right", "bottom"),
name = "lower right")
pushViewport(vp5)
print(Tplot.greys, newpage = FALSE)
upViewport(1)
install.packages("TrialSize")
install.packages("formatR")
install.packages("pwr")
?pwr
library("pwr")
?pwr
?pwr.t.test
pwr.t.test(d = 0.8, sig.level = 0.05, power = 0.9, type = "two.sample", alternative = "two.sided")
pwr.t.test(n = 40, sig.level = 0.01, type = "two.sample", alternative = "two.sided")
pwr.t.test(n = 40, d = 0.5, sig.level = 0.01, type = "two.sample", alternative = "two.sided")
pwr.t.test(n = 20, d = 0.5, sig.level = 0.01, type = "two.sample", alternative = "two.sided")
pwr.r.test(r = 0.25, sig.level = 0.05, power = 0.90, alterantive = "greater")
pwr.r.test(r = 0.25, sig.level = 0.05, power = 0.90, alternative = "greater")
pwr.2p.test(h = ES.h(0.65, 0.60), sig.level = 0.05, power = 0.90, alternative = "greater")
pwr.2p.test(h = ES.h(0.65, 0.65), sig.level = 0.05, power = 0.90, alternative = "greater")
pwr.2p.test(h = ES.h(0.20, 0.20), sig.level = 0.05, power = 0.90, alternative = "greater")
r <- seq(0.1, 0.5, 0.01)
nr <- length(r)
power <- seq(0.4, 0.9, 0.1)
npower <- length(power)
samplesize <- array(numeric(nr * npower), dim = c(nr, npower))
samplesize
edit(samplesize)
samplesize <- array(numeric(nr * npower), dim = c(nr, npower))
for (i in 1:npower){
for (j in 1:nr){
result <- pwr.r.test(n = NULL, r = r[j],
sig.level = 0.05, power = p[i],
alternative = "two.sided")
samplesize[j, i] <- ceiling(result$n)
}
}
for (i in 1:npower){
for (j in 1:nr){
result <- pwr.r.test(n = NULL, r = r[j],
sig.level = 0.05, power = power[i],
alternative = "two.sided")
samplesize[j, i] <- ceiling(result$n)
}
}
samplesize
library("pwr")
r <- seq(0.1, 0.5, 0.01)
nr <- length(r)
power <- seq(0.4, 0.9, 0.1)
npower <- length(power)
samplesize <- array(numeric(nr * npower), dim = c(nr, npower))
for (i in 1:npower){
for (j in 1:nr){
result <- pwr.r.test(n = NULL, r = r[j],
sig.level = 0.05, power = power[i],
alternative = "two.sided")
samplesize[j, i] <- ceiling(result$n)
}
}
xrange <- range(r)
yrange <- round(range(samplesize))
colors <- rainbow(length(power))
?plot
plot(xrange, yrange, type = "n", xlab = "Correlation Coefficient (r)"),
ylab = "Sample Size (n)")
plot(xrange, yrange, type = "n", xlab = "Correlation Coefficient (r)",
ylab = "Sample Size (n)")
for (i in 1:npower){
lines(r, samplesize[,i], type = "l", lwd = 2, col = colors[i])
}
abline(v = 0, h = seq(0, yrange[2], 50), lty=2, col = "grey89")
title("Sample Size Estimation for Correlation Studies\n
Sig = 0.05 (Two-tailed)")
legend("topright", title = "Power", as.character(power), fill = colors)
library("pwr")
pwr.t.test(d = 0.5, sig.level = 0.025, power = 0.9, type = "two.sample", alternative = "one.sided")
pwr.t.test(d = 0.5, sig.level = 0.025, power = 0.9, type = "two.sample", alternative = "greater")
pwr.2p.test(h = ES.h(0.146, 0.05), sig.level = 0.05, power = 0.90, alternative = "two.sided")
pwr.t.test(d = 0.5, sig.level = 0.025, power = 0.9, type = "two.sample", alternative = "greater")
pwr.t.test(d = 0.5, sig.level = 0.05, power = 0.9, type = "two.sample", alternative = "two.sided")
?pwr.t2n.test
# pwr.t.test(d = 0.5, sig.level = 0.05, power = 0.9, type = "two.sample", alternative = "greater")
pwr.t.test(d = 0.5, sig.level = 0.05, power = 0.9, type = "two.sample", alternative = "greater")
?pwr.2p.test
pwr.t.test(d = 2/3, sig.level = 0.025, power = 0.9, type = "two.sample", alternative = "greater")
pwr.t.test(d = 2/3, sig.level = 0.05, power = 0.9, type = "two.sample", alternative = "two.sided")
pwr.t.test(d = 1.5/3, sig.level = 0.05, power = 0.9, type = "two.sample", alternative = "two.sided")
pwr.t.test(d = 2.4/3, sig.level = 0.05, power = 0.9, type = "two.sample", alternative = "two.sided")
pwr.t.test(d = 24/30, sig.level = 0.05, power = 0.9, type = "two.sample", alternative = "two.sided")
pwr.t.test(d = 24/30, sig.level = 0.05, power = 0.9, type = "two.sample", alternative = "two.sided")
68/0.9
r <- seq(0.1, 0.5, 0.01)
nr <- length(r)
power <- seq(0.4, 0.9, 0.1)
npower <- length(power)
samplesize <- array(numeric(nr * npower), dim = c(nr, npower))
for (i in 1:npower){
for (j in 1:nr){
result <- pwr.r.test(n = NULL, r = r[j],
sig.level = 0.05, power = power[i],
alternative = "two.sided")
samplesize[j, i] <- ceiling(result$n)
}
}
xrange <- range(r)
yrange <- round(range(samplesize))
colors <- rainbow(length(power))
plot(xrange, yrange, type = "n", xlab = "Correlation Coefficient (r)",
ylab = "Sample Size (n)")
for (i in 1:npower){
lines(r, samplesize[,i], type = "l", lwd = 2, col = colors[i])
}
abline(v = 0, h = seq(0, yrange[2], 50), lty=2, col = "grey89")
title("Sample Size Estimation for Correlation Studies\n
Sig = 0.05 (Two-tailed)")
legend("topright", title = "Power", as.character(power), fill = colors)
pwr.2p.test(h = ES.h(0.25, 0.15), sig.level = 0.1, power = 0.90, alternative = "two.sided")
pwr.2p.test(h = ES.h(0.21, 0.15), sig.level = 0.1, power = 0.90, alternative = "two.sided")
2 + 3
3 * 12
5^10
data(mtcars)
data(mtcars)
names(mtcars)
summary(mtcars[1:2])
edit(mtcars)
2 + 3
3 * 12
5^10
?qplot
install.packages(ggplot2)
install.packages("ggplot2")
library("ggplot2")
library("ggplot2")
mtcars$gear <- factor(mtcars$gear, levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(mtcars$am,levels=c(0,1),
labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
qplot(mpg, data=mtcars, geom="density", fill=gear, alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
data(mtcars)
library("ggplot2")
qplot(mpg, data=mtcars, geom="density", fill=gear, alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
str(mtcars)
qplot(factor(mpg), data=mtcars, geom="density", fill=gear, alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
qplot(factor(mpg), data=mtcars, geom="density", fill=factor(gear), alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
qplot(mpg, data=mtcars, geom="density", fill=gear, # alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
mtcars$gear <- factor(mtcars$gear, levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(mtcars$am,levels=c(0,1),
labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
qplot(mpg, data=mtcars, geom="density", fill=gear, # alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
?qplot
?I
qplot(mpg, data=mtcars, geom="density", fill=gear,alpha=0.5,
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
qplot(mpg, data=mtcars, geom="density",  alpha=0.5,
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
ggplot(mtcars, aes(x=mpg, y=..density..)) +
geom_histogram(fill=gear)
ggplot(mtcars, aes(x=mpg, y=..density..)) +
geom_histogram(fill="gear")
ggplot(mtcars, aes(x=mpg, y=..density..)) +
geom_histogram(fill=gear)
ggplot(mtcars, aes(x=mpg, y=..density..)) +
geom_histogram(fill=cornsilk")
+++
quit
asd;j;k
asdfj;
ggplot(mtcars, aes(x=mpg, y=..density..)) +
geom_histogram(fill=cornsilk")
""
geom_histogram(fill="cornsilk")
ggplot(mtcars, aes(x=mpg, y=..density..)) +
geom_histogram(fill="cornsilk")
ggplot(mtcars, aes(x=mpg, y=..density..)) +
geom_histogram(fill="cornsilk", colour="grey60")
ggplot(mtcars, aes(x=mpg, y=..density..)) +
geom_histogram(fill="cornsilk", colour="grey60", size=0.2)
ggplot(mtcars, aes(x=mpg, y=..density..)) +
geom_histogram(fill="cornsilk", colour="grey60", size=0.2) +
geom_density()
ggplot(mtcars, aes(x=mpg, y=..density..)) +
geom_histogram(fill="cornsilk", colour="grey60", size=0.2) +
geom_density(fill=gear)
ggplot(mtcars, aes(x=mpg, y=..density.., fill=gear)) +
geom_histogram(fill="cornsilk", colour="grey60", size=0.2) +
geom_density()
ggplot(mtcars, aes(x=mpg, y=..density.., fill=gear), alpha=0.5) +
geom_histogram(fill="cornsilk", colour="grey60", size=0.2) +
geom_density()
ggplot(mtcars, aes(x=mpg, y=..density.., fill=gear)) +
geom_histogram(fill="cornsilk", colour="grey60", size=0.2) +
geom_density(alpha=0.5)
ggplot(mtcars, aes(x=mpg, y=..density..)) +
geom_histogram(fill="cornsilk", colour="grey60", size=0.2) +
geom_density(alpha=0.5)
?options
?geom_smooth
?geom_point
library(ggplot2)
?geom_point
?geom_smooth
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(aes(color=wt)) +
geom_smooth(method="lm")
names(mtcars)
ggplot(mtcars, aes(x = factor(gear), y = mpg)) +
geom_point(aes(color = wt)) +
facet_wrap(~factor(cyl))
library(ggplot2)
ggplot(mtcars, aes(x = factor(gear), y = mpg)) +
geom_point(aes(color = wt)) +
facet_wrap(~factor(cyl))
ggplot(mtcars, aes(x = factor(gear), y = mpg)) +
geom_point() +
facet_wrap(~factor(cyl))
ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +
geom_point() +
facet_wrap(~factor(hp))
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
facet_wrap(~factor(cyl))
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
facet_grid(factor(gear)~factor(cyl))
qplot(hp, mpg, data=mtcars, shape=am, color=am,
facets=gear~cyl, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon")
mtcars$gear <- factor(mtcars$gear, levels=c(3,4,5), labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(mtcars$am,levels=c(0,1),labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8), labels=c("4cyl","6cyl","8cyl"))
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
facet_grid(gear ~ cyl)
ggplot(mtcars, aes(x=hp, y=mpg,
color=am))+
geom_point()
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(aes(color=wt, shape = am))
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(aes(color=cyl, shape = am)) +
theme(plot.background = element_rect(
fill = "white",
color = "gray40"))
source('~/.active-rstudio-document', echo=TRUE)
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(aes(color=cyl, shape = am)) +
theme(plot.background = element_rect(
fill = "white",
color = "gray40"))
par(mar = c(4,4,.1,.1))
plot(mpg ~ hp,
data=subset(mtcars, am==1),
xlim=c(50, 450),ylim=c(5, 40))
points(mpg ~ hp, col="red",
data=subset(mtcars, am==0))
legend(350, 40,
c("1", "0"), title="am",
col=c("black", "red"),
pch=c(1, 1))
?points
par(mar = c(4,4,.1,.1))
plot(mpg ~ hp,
data=subset(mtcars, am==1),
xlim=c(50, 450),ylim=c(5, 40))
points(mpg ~ hp, col="blue",
data=subset(mtcars, am==0))
legend(350, 40,
c("1", "0"), title="am",
col=c("black", "blue"),
pch=c(1, 1))
par(mar = c(4,4,.1,.1))
plot(mpg ~ hp,
data=subset(mtcars, am==1),
xlim=c(50, 450),ylim=c(5, 40))
points(mpg ~ hp, col="red",
data=subset(mtcars, am==0))
legend(350, 40,
c("1", "0"), title="am",
col=c("black", "red"),
pch=c(1, 1))
library(ggplot2)
data(mtcars)
str(mtcars)
mtcars$am <- factor(mtcars$am)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$gear <- factor(mtcars$gear)
str(mtcars)
ggplot(mtcars, aes(x=disp, y=hp))
p <- ggplot(mtcars, aes(x=disp, y=hp))
p + geom_point()
p + geom_point(color="blue")
p + geom_point(aes(color=mpg)
)
ggplot(mtcars, aes(x = mpg)) +
geom_bar(stat = "bin", binwidth=4)
ggplot(mtcars, aes(x = mpg)) + geom_histogram(binwidth=4)
ggplot(mtcars, aes(x = gear, y=mpg)) + geom_boxplot()
ggplot(mtcars, aes(x = mpg)) + geom_histogram(binwidth=4, color="orange")
ggplot(mtcars, aes(x = mpg)) + geom_histogram(binwidth=4, fill="yellow", color="orange")
ggplot(mtcars, aes(x = gear, y = mpg)) +
geom_point(aes(color = wt))
ggplot(mtcars, aes(x = gear, y = mpg)) +
geom_point(aes(color = wt))
ggplot(mtcars, aes(x = gear, y = mpg)) +
geom_point(aes(color = wt)) +
scale_x_discrete("Number of Gears", breaks = c("3", "4", "5"),
labels = c("Three", "Four", "Five"))
ggplot(mtcars, aes(x = gear, y = mpg)) +
geom_point(aes(size = wt)) +
scale_size_continuous("Weight", range = c(2, 10))
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(aes(color=cyl, shape = am)) +
theme_bw() +
theme(plot.background = element_rect(
fill = "white",
color = "gray40"))
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(aes(color=cyl, shape = am)) +
theme_bw() +
theme(plot.background = element_rect(
fill = "white",
color = "gray40")) +
scale_color_discrete("Cylinder")
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(aes(color=cyl, shape = am)) +
theme_bw() +
theme(plot.background = element_rect(
fill = "white",
color = "gray40")) +
scale_color_discrete("Cylinder") +
scale_shape_discrete("Tramsmission", breaks = c("0", "1"),
labels = c("Automatic", "Manual"))
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(aes(color=cyl, shape = am)) +
theme_bw() +
theme(plot.background = element_rect(
fill = "white",
color = "gray40")) +
scale_color_discrete("Cylinder", breaks = c("4", "6", "8"),
labels = c(" 4 Cyl", " 6 Cyl", " 8 Cyl")) +
scale_shape_discrete("Tramsmission", breaks = c("0", "1"),
labels = c(" Automatic", " Manual"))
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(aes(color=cyl, shape = am)) +
theme_bw() +
theme(plot.background = element_rect(
fill = "white",
color = "gray40")) +
scale_color_discrete("Cylinder", breaks = c("4", "6", "8"),
labels = c(" 4 Cyl", " 6 Cyl", " 8 Cyl")) +
scale_shape_discrete("Tramsmission", breaks = c("0", "1"),
labels = c(" Automatic", " Manual")) +
scale_x_discrete("Horsepower")
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(aes(color=cyl, shape = am)) +
theme_bw() +
theme(plot.background = element_rect(
fill = "white",
color = "gray40")) +
scale_color_discrete("Cylinder", breaks = c("4", "6", "8"),
labels = c(" 4 Cyl", " 6 Cyl", " 8 Cyl")) +
scale_shape_discrete("Tramsmission", breaks = c("0", "1"),
labels = c(" Automatic", " Manual")) +
scale_x_continuous("Horsepower")
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(aes(color=cyl, shape = am)) +
theme_bw() +
theme(plot.background = element_rect(
fill = "white",
color = "gray40")) +
scale_color_discrete("Cylinder", breaks = c("4", "6", "8"),
labels = c(" 4 Cyl", " 6 Cyl", " 8 Cyl")) +
scale_shape_discrete("Tramsmission", breaks = c("0", "1"),
labels = c(" Automatic", " Manual")) +
scale_x_continuous("Horsepower") +
scale_y_continuous("Mile Per Gallon")
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(aes(color=cyl, shape = am)) +
theme_bw() +
theme(plot.background = element_rect(
fill = "white",
color = "gray40")) +
scale_color_discrete("Cylinder", breaks = c("4", "6", "8"),
labels = c(" 4 Cyl", " 6 Cyl", " 8 Cyl")) +
scale_shape_discrete("Tramsmission", breaks = c("0", "1"),
labels = c(" Automatic", " Manual")) +
scale_x_continuous("Horsepower") +
scale_y_continuous("Mile Per Gallon")
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(aes(color=cyl, shape = am)) +
theme_bw() +
theme(plot.background = element_rect(
fill = "white",
color = "gray40")) +
scale_color_discrete("Cylinder", breaks = c("4", "6", "8"),
labels = c(" 4 Cyl", " 6 Cyl", " 8 Cyl")) +
scale_shape_discrete("Tramsmission", breaks = c("0", "1"),
labels = c(" Automatic", " Manual"))
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(aes(color=cyl, shape = am)) +
theme_bw() +
theme(plot.background = element_rect(
fill = "white",
color = "gray40")) +
scale_color_discrete("Cylinder", breaks = c("4", "6", "8"),
labels = c(" 4 Cyl", " 6 Cyl", " 8 Cyl")) #+
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(aes(color=cyl, shape = am)) +
theme_bw() +
theme(plot.background = element_rect(
fill = "white",
color = "gray40")) +
scale_color_discrete("Cylinder", breaks = c("4", "6", "8"),
labels = c(" 4 Cyl", " 6 Cyl", " 8 Cyl"))
plot(mtcars$wt, mtcars$mpg)
identify(mtcars$wt, mtcars$mpg, labels=ros.names(mtcars))
identify(mtcars$wt, mtcars$mpg, labels=row.names(mtcars))
identify(mtcars$wt, mtcars$mpg, labels=row.names(mtcars))
install.packages("playwith")
install.packages("lattice")
playwith(
xyplot(mpg~wt | factor(cyl)*factor(am),
data=mtcars, subscrips=T,
type=c("r", "p")))
library(playwith)
library(lattice)
playwith(
xyplot(mpg~wt | factor(cyl)*factor(am),
data=mtcars, subscrips=T,
type=c("r", "p")))
install.packages("playwith", depend=T)
install.packages("playwith", depend = T)
install.packages("playwith", depend=T)
install.packages("playwith", depend = T)
install.packages("lattice", depend=T)
library(playwith)
library(lattice)
playwith(
xyplot(mpg~wt | factor(cyl)*factor(am),
data=mtcars, subscrips=T,
type=c("r", "p")))
install.packages("mtcars")
install.packages("googleVis")
library("googleVis")
G1 <- gvisGeoChart(Exports,
locationvar='Country',
colorvar='Profit')
plot(G1)
install.packages("lubridate")
install.packages("ggtheme")
library("ggthemes", lib.loc="C:/Users/KYPark/Documents/R/win-library/3.0")
install.packages(c("devtools", "rgdal"))
install.packages(c("e1071", "extrafont", "fields", "ggthemes", "gtools", "httpuv", "knitcitations", "lubridate", "Matrix", "minqa", "psych", "raster", "RcppEigen", "rJava", "slam", "Snowball", "survival", "tm", "yaml"))
install.packages(c("foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart", "survival"), lib="C:/Program Files/R/R-3.0.2/library")
getwd()
getwd()
getwd()
Sys.getenv("R_HOME")
getwd()
?htmlTable
??htmlTable
install.packages(c("chron", "gtools", "Hmisc", "httpuv", "igraph", "installr", "lme4", "markdown", "Matrix", "minqa", "NLP", "openNLP", "plotrix", "psych", "raster", "Rcpp", "RcppEigen", "rgdal", "survival"))
install.packages(c("foreign", "Matrix", "mgcv", "rpart", "survival"), lib="C:/Program Files/R/R-3.0.2/library")
install.packages("Matrix", lib="C:/Program Files/R/R-3.0.3/library")
publish('mydeck', host='dropbox')
library(devtools)
library(slidify)
publish('mydeck', host='dropbox')
install.packages(c("lme4", "plotrix", "qdap", "Rcpp", "yaml"))
install.packages("cluster", lib="C:/Program Files/R/R-3.0.3/library")
library(devtools)
setwd("C:/RBook/SlidifyPresentation/20140321SMCReproducibleResearch/images")
